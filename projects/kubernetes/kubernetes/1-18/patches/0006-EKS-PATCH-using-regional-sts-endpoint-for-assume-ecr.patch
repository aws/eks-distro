From 5bb639aa3e06157ef86d6fcfa057c6914ff3c775 Mon Sep 17 00:00:00 2001
From: Yang Yang <yyyng@amazon.com>
Date: Mon, 20 Jan 2020 11:59:08 -0800
Subject: [PATCH 06/16] --EKS-PATCH-- using regional sts endpoint for assume
 ecr pull role

Signed-off-by: Gyuho Lee <leegyuho@amazon.com>
Signed-off-by: Jackson West <jgw@amazon.com>
---
 pkg/credentialprovider/aws/BUILD              |  6 ++++
 pkg/credentialprovider/aws/aws_credentials.go | 36 +++++++++++++++++++
 .../k8s.io/legacy-cloud-providers/aws/aws.go  |  4 +--
 .../legacy-cloud-providers/aws/aws_test.go    | 10 +++---
 4 files changed, 49 insertions(+), 7 deletions(-)

diff --git a/pkg/credentialprovider/aws/BUILD b/pkg/credentialprovider/aws/BUILD
index f83326497c3..c139720ea4c 100644
--- a/pkg/credentialprovider/aws/BUILD
+++ b/pkg/credentialprovider/aws/BUILD
@@ -15,10 +15,16 @@ go_library(
         "//staging/src/k8s.io/apimachinery/pkg/util/wait:go_default_library",
         "//staging/src/k8s.io/client-go/tools/cache:go_default_library",
         "//staging/src/k8s.io/component-base/version:go_default_library",
+        "//staging/src/k8s.io/legacy-cloud-providers/aws:go_default_library",
         "//vendor/github.com/aws/aws-sdk-go/aws:go_default_library",
+        "//vendor/github.com/aws/aws-sdk-go/aws/credentials:go_default_library",
+        "//vendor/github.com/aws/aws-sdk-go/aws/credentials/ec2rolecreds:go_default_library",
+        "//vendor/github.com/aws/aws-sdk-go/aws/credentials/stscreds:go_default_library",
+        "//vendor/github.com/aws/aws-sdk-go/aws/ec2metadata:go_default_library",
         "//vendor/github.com/aws/aws-sdk-go/aws/request:go_default_library",
         "//vendor/github.com/aws/aws-sdk-go/aws/session:go_default_library",
         "//vendor/github.com/aws/aws-sdk-go/service/ecr:go_default_library",
+        "//vendor/github.com/aws/aws-sdk-go/service/sts:go_default_library",
         "//vendor/k8s.io/klog:go_default_library",
     ],
 )
diff --git a/pkg/credentialprovider/aws/aws_credentials.go b/pkg/credentialprovider/aws/aws_credentials.go
index 82a990dc4a1..5ea6ec24115 100644
--- a/pkg/credentialprovider/aws/aws_credentials.go
+++ b/pkg/credentialprovider/aws/aws_credentials.go
@@ -21,21 +21,28 @@ import (
 	"errors"
 	"fmt"
 	"net/url"
+	"os"
 	"regexp"
 	"strings"
 	"sync"
 	"time"
 
 	"github.com/aws/aws-sdk-go/aws"
+	"github.com/aws/aws-sdk-go/aws/credentials"
+	"github.com/aws/aws-sdk-go/aws/credentials/ec2rolecreds"
+	"github.com/aws/aws-sdk-go/aws/credentials/stscreds"
+	"github.com/aws/aws-sdk-go/aws/ec2metadata"
 	"github.com/aws/aws-sdk-go/aws/request"
 	"github.com/aws/aws-sdk-go/aws/session"
 	"github.com/aws/aws-sdk-go/service/ecr"
+	"github.com/aws/aws-sdk-go/service/sts"
 
 	"k8s.io/apimachinery/pkg/util/wait"
 	"k8s.io/client-go/tools/cache"
 	"k8s.io/component-base/version"
 	"k8s.io/klog"
 	"k8s.io/kubernetes/pkg/credentialprovider"
+	k8saws "k8s.io/legacy-cloud-providers/aws"
 )
 
 var ecrPattern = regexp.MustCompile(`^(\d{12})\.dkr\.ecr(\-fips)?\.([a-zA-Z0-9][a-zA-Z0-9-_]*)\.amazonaws\.com(\.cn)?$`)
@@ -219,6 +226,35 @@ func newECRTokenGetter(region string) (tokenGetter, error) {
 	if err != nil {
 		return nil, err
 	}
+
+	// TODO: Remove this once aws sdk is updated to latest version.
+	var provider credentials.Provider
+	ecrPullRoleArn := os.Getenv("ECR_PULL_ROLE_ARN")
+	assumeRoleRegion := os.Getenv("AWS_DEFAULT_REGION")
+	if ecrPullRoleArn != "" && assumeRoleRegion != "" {
+		stsEndpoint, err := k8saws.ConstructStsEndpoint(ecrPullRoleArn, assumeRoleRegion)
+		if err != nil {
+			return nil, err
+		}
+		klog.Infof("Using AWS assumed role, %v:%v:%v", ecrPullRoleArn, assumeRoleRegion, stsEndpoint)
+		provider = &stscreds.AssumeRoleProvider{
+			Client:  sts.New(sess, aws.NewConfig().WithRegion(assumeRoleRegion).WithEndpoint(stsEndpoint)),
+			RoleARN: ecrPullRoleArn,
+		}
+	} else {
+		provider = &ec2rolecreds.EC2RoleProvider{
+			Client: ec2metadata.New(sess),
+		}
+	}
+
+	creds := credentials.NewChainCredentials(
+		[]credentials.Provider{
+			&credentials.EnvProvider{},
+			provider,
+			&credentials.SharedCredentialsProvider{},
+		})
+	sess.Config.Credentials = creds
+
 	getter := &ecrTokenGetter{svc: ecr.New(sess)}
 	getter.svc.Handlers.Build.PushFrontNamed(request.NamedHandler{
 		Name: "k8s/user-agent",
diff --git a/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go b/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go
index a115c547047..d95e0834d79 100644
--- a/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go
+++ b/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go
@@ -736,7 +736,7 @@ func newAWSSDKProvider(cfg *CloudConfig) (*awsSDKProvider, error) {
 		if err != nil {
 			return nil, err
 		}
-		stsEndpoint, err := constructStsEndpoint(cfg.Global.RoleARN, regionName)
+		stsEndpoint, err := ConstructStsEndpoint(cfg.Global.RoleARN, regionName)
 		if err != nil {
 			return nil, err
 		}
@@ -4807,7 +4807,7 @@ func arnToAwsUrlSuffix(arnString string) (string, error) {
 	}
 }
 
-func constructStsEndpoint(arnString, region string) (string, error) {
+func ConstructStsEndpoint(arnString, region string) (string, error) {
 	suffix, err := arnToAwsUrlSuffix(arnString)
 	if err != nil {
 		return "", err
diff --git a/staging/src/k8s.io/legacy-cloud-providers/aws/aws_test.go b/staging/src/k8s.io/legacy-cloud-providers/aws/aws_test.go
index ef46452c3bd..b4549a80527 100644
--- a/staging/src/k8s.io/legacy-cloud-providers/aws/aws_test.go
+++ b/staging/src/k8s.io/legacy-cloud-providers/aws/aws_test.go
@@ -1987,7 +1987,7 @@ func TestConstructStsEndpoint(t *testing.T) {
 	t.Run("returns an error when the arn is invalid", func(t *testing.T) {
 		arn := "asdf"
 		region := "us-east-1"
-		endpoint, err := constructStsEndpoint(arn, region)
+		endpoint, err := ConstructStsEndpoint(arn, region)
 		assert.Equal(t, endpoint, "")
 		require.Error(t, err)
 	})
@@ -1995,7 +1995,7 @@ func TestConstructStsEndpoint(t *testing.T) {
 	t.Run("returns sts.us-east-1.amazonaws.com when region/partition is us-east-1/aws", func(t *testing.T) {
 		arn := "arn:aws:eks:us-east-1:1234:cluster/asdf"
 		region := "us-east-1"
-		endpoint, err := constructStsEndpoint(arn, region)
+		endpoint, err := ConstructStsEndpoint(arn, region)
 		assert.Equal(t, endpoint, "sts.us-east-1.amazonaws.com")
 		require.NoError(t, err)
 	})
@@ -2003,7 +2003,7 @@ func TestConstructStsEndpoint(t *testing.T) {
 	t.Run("returns sts.cn-northwest-1.amazonaws.com.cn when region/partition is cn-northwest-1/aws-cn", func(t *testing.T) {
 		arn := "arn:aws-cn:eks:cn-northwest-1:1234:cluster/asdf"
 		region := "cn-northwest-1"
-		endpoint, err := constructStsEndpoint(arn, region)
+		endpoint, err := ConstructStsEndpoint(arn, region)
 		assert.Equal(t, endpoint, "sts.cn-northwest-1.amazonaws.com.cn")
 		require.NoError(t, err)
 	})
@@ -2011,7 +2011,7 @@ func TestConstructStsEndpoint(t *testing.T) {
 	t.Run("returns sts.us-gov-east-1.amazonaws.com when region/partion is us-gov-east-1/aws-us-gov", func(t *testing.T) {
 		arn := "arn:aws-us-gov:eks:us-gov-east-1:1234:cluster/asdf"
 		region := "us-gov-east-1"
-		endpoint, err := constructStsEndpoint(arn, region)
+		endpoint, err := ConstructStsEndpoint(arn, region)
 		assert.Equal(t, endpoint, "sts.us-gov-east-1.amazonaws.com")
 		require.NoError(t, err)
 	})
@@ -2019,7 +2019,7 @@ func TestConstructStsEndpoint(t *testing.T) {
 	t.Run("returns sts.me-south-1.amazonaws.com when region/partion is me-south-1/aws", func(t *testing.T) {
 		arn := "arn:aws:eks:me-south-1:1234:cluster/asdf"
 		region := "me-south-1"
-		endpoint, err := constructStsEndpoint(arn, region)
+		endpoint, err := ConstructStsEndpoint(arn, region)
 		assert.Equal(t, endpoint, "sts.me-south-1.amazonaws.com")
 		require.NoError(t, err)
 	})
-- 
2.29.2

