From 370504b5fc4b12d18d9c4bb38b35c84bab6ff547 Mon Sep 17 00:00:00 2001
From: M00nF1sh <yyyng@amazon.com>
Date: Tue, 2 Jul 2019 10:44:42 -0700
Subject: [PATCH 02/16] --EKS-PATCH-- Pass region to sts client for ap-east-1

Signed-off-by: Jackson West <jgw@amazon.com>
---
 .../k8s.io/legacy-cloud-providers/aws/aws.go  | 75 +++++++++++--------
 1 file changed, 43 insertions(+), 32 deletions(-)

diff --git a/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go b/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go
index c44c5872564..aca86cdade3 100644
--- a/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go
+++ b/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go
@@ -706,12 +706,50 @@ type awsSDKProvider struct {
 	regionDelayers map[string]*CrossRequestRetryDelay
 }
 
-func newAWSSDKProvider(creds *credentials.Credentials, cfg *CloudConfig) *awsSDKProvider {
-	return &awsSDKProvider{
-		creds:          creds,
+func newAWSSDKProvider(cfg *CloudConfig) (*awsSDKProvider, error) {
+	sdkProvider := &awsSDKProvider{
 		cfg:            cfg,
 		regionDelayers: make(map[string]*CrossRequestRetryDelay),
 	}
+	metadata, err := sdkProvider.Metadata()
+	if err != nil {
+		return nil, fmt.Errorf("error creating AWS metadata client: %q", err)
+	}
+	if err := updateConfigZone(cfg, metadata); err != nil {
+		return nil, fmt.Errorf("unable to determine AWS zone from cloud provider config or EC2 instance metadata: %v", err)
+	}
+
+	sess, err := session.NewSession(&aws.Config{})
+	if err != nil {
+		return nil, fmt.Errorf("unable to initialize AWS session: %v", err)
+	}
+
+	var provider credentials.Provider
+	if cfg.Global.RoleARN == "" {
+		provider = &ec2rolecreds.EC2RoleProvider{
+			Client: ec2metadata.New(sess),
+		}
+	} else {
+		klog.Infof("Using AWS assumed role %v", cfg.Global.RoleARN)
+		regionName, err := azToRegion(cfg.Global.Zone)
+		if err != nil {
+			return nil, err
+		}
+		stsEndpoint := fmt.Sprintf("sts.%s.amazonaws.com", regionName)
+		provider = &stscreds.AssumeRoleProvider{
+			Client:  sts.New(sess, aws.NewConfig().WithRegion(regionName).WithEndpoint(stsEndpoint)),
+			RoleARN: cfg.Global.RoleARN,
+		}
+	}
+
+	creds := credentials.NewChainCredentials(
+		[]credentials.Provider{
+			&credentials.EnvProvider{},
+			provider,
+			&credentials.SharedCredentialsProvider{},
+		})
+	sdkProvider.creds = creds
+	return sdkProvider, nil
 }
 
 func (p *awsSDKProvider) addHandlers(regionName string, h *request.Handlers) {
@@ -1138,32 +1176,10 @@ func init() {
 			return nil, fmt.Errorf("unable to validate custom endpoint overrides: %v", err)
 		}
 
-		sess, err := session.NewSession(&aws.Config{})
+		aws, err := newAWSSDKProvider(cfg)
 		if err != nil {
-			return nil, fmt.Errorf("unable to initialize AWS session: %v", err)
-		}
-
-		var provider credentials.Provider
-		if cfg.Global.RoleARN == "" {
-			provider = &ec2rolecreds.EC2RoleProvider{
-				Client: ec2metadata.New(sess),
-			}
-		} else {
-			klog.Infof("Using AWS assumed role %v", cfg.Global.RoleARN)
-			provider = &stscreds.AssumeRoleProvider{
-				Client:  sts.New(sess),
-				RoleARN: cfg.Global.RoleARN,
-			}
+			return nil, err
 		}
-
-		creds := credentials.NewChainCredentials(
-			[]credentials.Provider{
-				&credentials.EnvProvider{},
-				provider,
-				&credentials.SharedCredentialsProvider{},
-			})
-
-		aws := newAWSSDKProvider(creds, cfg)
 		return newAWSCloud(*cfg, aws)
 	})
 }
@@ -1232,16 +1248,11 @@ func newAWSCloud(cfg CloudConfig, awsServices Services) (*Cloud, error) {
 	if err != nil {
 		return nil, fmt.Errorf("error creating AWS metadata client: %q", err)
 	}
-
 	err = updateConfigZone(&cfg, metadata)
 	if err != nil {
 		return nil, fmt.Errorf("unable to determine AWS zone from cloud provider config or EC2 instance metadata: %v", err)
 	}
-
 	zone := cfg.Global.Zone
-	if len(zone) <= 1 {
-		return nil, fmt.Errorf("invalid AWS zone in config file: %s", zone)
-	}
 	regionName, err := azToRegion(zone)
 	if err != nil {
 		return nil, err
-- 
2.29.2

