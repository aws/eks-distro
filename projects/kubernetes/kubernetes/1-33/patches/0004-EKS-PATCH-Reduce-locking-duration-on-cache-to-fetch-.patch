From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aditya Venneti <vennetad@amazon.com>
Date: Wed, 21 May 2025 03:37:45 +0000
Subject: [PATCH] --EKS-PATCH-- Reduce locking duration on cache to fetch data
 from Cache

Description:
* This PR introduces a StatefulSet indexer for the PodInformer to
  efficiently query Pods belonging to StatefulSets or Orphans from the
  InformerCache, avoiding a full namespace scan.

  This improves performance and correctness at scale by minimizing the
  time a read lock is held on the cache, reducing blockage of
  CacheController delta processing. It also helps lower workqueue
  processing time per object/key.

Upstream PR:
* https://github.com/kubernetes/kubernetes/pull/130806
---
 pkg/controller/statefulset/stateful_set.go | 30 +++++++++++++++++-----
 1 file changed, 23 insertions(+), 7 deletions(-)

diff --git a/pkg/controller/statefulset/stateful_set.go b/pkg/controller/statefulset/stateful_set.go
index ad0a3b53c67..53dffab6caa 100644
--- a/pkg/controller/statefulset/stateful_set.go
+++ b/pkg/controller/statefulset/stateful_set.go
@@ -61,6 +61,8 @@ type StatefulSetController struct {
 	control StatefulSetControlInterface
 	// podControl is used for patching pods.
 	podControl controller.PodControlInterface
+	// podIndexer allows looking up pods by ControllerRef UID
+	podIndexer cache.Indexer
 	// podLister is able to list/get pods from a shared informer's store
 	podLister corelisters.PodLister
 	// podListerSynced returns true if the pod shared informer has synced at least once
@@ -129,7 +131,8 @@ func NewStatefulSetController(
 	})
 	ssc.podLister = podInformer.Lister()
 	ssc.podListerSynced = podInformer.Informer().HasSynced
-
+	controller.AddPodControllerUIDIndexer(podInformer.Informer())
+	ssc.podIndexer = podInformer.Informer().GetIndexer()
 	setInformer.Informer().AddEventHandler(
 		cache.ResourceEventHandlerFuncs{
 			AddFunc: ssc.enqueueStatefulSet,
@@ -309,11 +312,24 @@ func (ssc *StatefulSetController) deletePod(logger klog.Logger, obj interface{})
 // NOTE: Returned Pods are pointers to objects from the cache.
 // If you need to modify one, you need to copy it first.
 func (ssc *StatefulSetController) getPodsForStatefulSet(ctx context.Context, set *apps.StatefulSet, selector labels.Selector) ([]*v1.Pod, error) {
-	// List all pods to include the pods that don't match the selector anymore but
-	// has a ControllerRef pointing to this StatefulSet.
-	pods, err := ssc.podLister.Pods(set.Namespace).List(labels.Everything())
-	if err != nil {
-		return nil, err
+	// Iterate over two keys:
+	//  The UID of the StatefulSet, which identifies Pods that are controlled by the StatefulSet.
+	//  The OrphanPodIndexKey, which helps identify orphaned Pods that are not currently managed by any controller,
+	//   but may be adopted later on if they have matching labels with the StatefulSet.
+	podsForSts := []*v1.Pod{}
+	for _, key := range []string{string(set.UID), controller.OrphanPodIndexKey} {
+		podObjs, err := ssc.podIndexer.ByIndex(controller.PodControllerUIDIndex, key)
+		if err != nil {
+			return nil, err
+		}
+		for _, obj := range podObjs {
+			pod, ok := obj.(*v1.Pod)
+			if !ok {
+				utilruntime.HandleError(fmt.Errorf("unexpected object type in pod indexer: %v", obj))
+				continue
+			}
+			podsForSts = append(podsForSts, pod)
+		}
 	}
 
 	filter := func(pod *v1.Pod) bool {
@@ -322,7 +338,7 @@ func (ssc *StatefulSetController) getPodsForStatefulSet(ctx context.Context, set
 	}
 
 	cm := controller.NewPodControllerRefManager(ssc.podControl, set, selector, controllerKind, ssc.canAdoptFunc(ctx, set))
-	return cm.ClaimPods(ctx, pods, filter)
+	return cm.ClaimPods(ctx, podsForSts, filter)
 }
 
 // If any adoptions are attempted, we should first recheck for deletion with
