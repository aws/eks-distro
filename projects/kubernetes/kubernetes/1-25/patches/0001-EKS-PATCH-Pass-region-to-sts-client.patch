From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Rasita Pai <prasita@amazon.com>
Date: Wed, 13 Oct 2021 10:46:18 -0700
Subject: [PATCH] --EKS-PATCH-- Pass region to sts client

Description:
* "First, this change explicitly sets the region from metadata. Second, it uses
.WithSTSRegionalEndpoint(endpoints.RegionalSTSEndpoint) to enable the regional STS endpoint. This is required because,
as of SDK v1.42.23, the default is legacy (endpoints.LegacySTSEndpoint)" (original commit message)

Upstream PR, Issue, KEP, etc. links:
* Cherry pick of Kubernetes commit 715f2af8e2342469d3c780c3d15c8545224af777
(https://github.com/kubernetes/kubernetes/pull/113084/commits/715f2af8e2342469d3c780c3d15c8545224af777), which is part
of PR #113084 (https://github.com/kubernetes/kubernetes/pull/113084).

If this patch is based on an upstream commit, how (if at all) do this patch and the upstream source differ?
* The patch is the same as the upstream commit, but the PR it is part of includes additional changes to update AWS SDK,
which are in a different patch.

If this patch's changes have not been added by upstream, why not?
* N/A

Other patches related to this patch:
* EKS-PATCH-Update-aws-sdk-go-to-include-new-regions.patch -- other commit in the Kubernetes PR (#113084) that contains
this patch's changes. The other patch has changed since the PR was merged, but the purpose of it remain the same. This
patch is needed because the other one updates to an AWS SDK version that requires it.

Changes made to this patch after its initial creation and reasons for these changes:
* None

Kubernetes version this patch can be dropped:
* v1.26 -- upstream includes these changes starting in this version

Signed-off-by: Nick Turner <nic@amazon.com>
---
 .../k8s.io/legacy-cloud-providers/aws/aws.go  | 32 ++++++++++++++++++-
 1 file changed, 31 insertions(+), 1 deletion(-)

diff --git a/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go b/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go
index 93ed45472b9..2aceff30890 100644
--- a/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go
+++ b/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go
@@ -1190,8 +1190,12 @@ func init() {
 			return nil, fmt.Errorf("unable to validate custom endpoint overrides: %v", err)
 		}
 
+		regionName, err := getRegionFromMetadata(cfg)
+		if err != nil {
+			return nil, err
+		}
 		sess, err := session.NewSessionWithOptions(session.Options{
-			Config:            aws.Config{},
+			Config:            *aws.NewConfig().WithRegion(regionName).WithSTSRegionalEndpoint(endpoints.RegionalSTSEndpoint),
 			SharedConfigState: session.SharedConfigEnable,
 		})
 		if err != nil {
@@ -1218,6 +1222,32 @@ func init() {
 	})
 }
 
+func getRegionFromMetadata(cfg *CloudConfig) (string, error) {
+	klog.Infof("Get AWS region from metadata client")
+
+	metadata, err := newAWSSDKProvider(nil, cfg).Metadata()
+	if err != nil {
+		return "", fmt.Errorf("error creating AWS metadata client: %q", err)
+	}
+
+	err = updateConfigZone(cfg, metadata)
+	if err != nil {
+		return "", fmt.Errorf("unable to determine AWS zone from cloud provider config or EC2 instance metadata: %v", err)
+	}
+
+	zone := cfg.Global.Zone
+	if len(zone) <= 1 {
+		return "", fmt.Errorf("invalid AWS zone in config file: %s", zone)
+	}
+
+	regionName, err := azToRegion(zone)
+	if err != nil {
+		return "", err
+	}
+
+	return regionName, nil
+}
+
 // readAWSCloudConfig reads an instance of AWSCloudConfig from config reader.
 func readAWSCloudConfig(config io.Reader) (*CloudConfig, error) {
 	var cfg CloudConfig
