From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Daniel Kennedy <dannyck@amazon.com>
Date: Sun, 22 Jun 2025 19:57:28 -0700
Subject: [PATCH] --EKS-PATCH-- Bump go version to 1.23.10

Description:
* Updates go version to 1.23.10

Upstream PR, Issue, KEP, etc. links:
* This patch is based on https://github.com/kubernetes/kubernetes/commit/af29100d195f4a224d543354ff04f3264d7350c6
* See: https://groups.google.com/g/golang-announce/c/ufZ8WpEsA3A

If this patch is based on an upstream commit, how (if at all) do this patch and the upstream source differ?
* Yes, upstream didn't make a patch for this k8s version since it is out of upstream support.

If this patch's changes have not been added by upstream, why not?
* This version is no longer supported upstream

Other patches related to this patch:
* N/A

Changes made to this patch after its initial creation and reasons for these changes:
* Updates to work with this k8s version

Kubernetes version this patch can be dropped:
* 1.29
---
 .go-version                                   |   2 +-
 build/build-image/cross/VERSION               |   2 +-
 build/common.sh                               |   2 +-
 build/dependencies.yaml                       |   6 +-
 staging/publishing/rules.yaml                 |   2 +-
 .../azure/azure_blobDiskController_test.go    | 364 ------------------
 test/images/Makefile                          |   2 +-
 7 files changed, 8 insertions(+), 372 deletions(-)
 delete mode 100644 staging/src/k8s.io/legacy-cloud-providers/azure/azure_blobDiskController_test.go

diff --git a/.go-version b/.go-version
index fa994bd7197..3339f046784 100644
--- a/.go-version
+++ b/.go-version
@@ -1 +1 @@
-1.23.6
\ No newline at end of file
+1.23.10
\ No newline at end of file
diff --git a/build/build-image/cross/VERSION b/build/build-image/cross/VERSION
index 55f1fb049ab..e92cbb8d643 100644
--- a/build/build-image/cross/VERSION
+++ b/build/build-image/cross/VERSION
@@ -1 +1 @@
-v1.29.0-go1.23.6-bullseye.0
+v1.29.0-go1.23.10-bullseye.0
diff --git a/build/common.sh b/build/common.sh
index 06292442695..61e9863de52 100755
--- a/build/common.sh
+++ b/build/common.sh
@@ -97,7 +97,7 @@ readonly KUBE_CONTAINER_RSYNC_PORT=8730

 # These are the default versions (image tags) for their respective base images.
 readonly __default_distroless_iptables_version=v0.5.13
-readonly __default_go_runner_version=v2.4.0-go1.23.6-bookworm.0
+readonly __default_go_runner_version=v2.4.0-go1.23.10-bookworm.0
 readonly __default_setcap_version=bookworm-v1.0.3

 # These are the base images for the Docker-wrapped binaries.
diff --git a/build/dependencies.yaml b/build/dependencies.yaml
index 876fa1484b4..8f0d2ea30ce 100644
--- a/build/dependencies.yaml
+++ b/build/dependencies.yaml
@@ -118,7 +118,7 @@ dependencies:
 
   # Golang
   - name: "golang: upstream version"
-    version: 1.23.6
+    version: 1.23.10
     refPaths:
     - path: .go-version
     - path: build/build-image/cross/VERSION
@@ -141,7 +141,7 @@ dependencies:
     #   match: minimum_go_version=go([0-9]+\.[0-9]+)
 
   - name: "registry.k8s.io/kube-cross: dependents"
-    version: v1.29.0-go1.23.6-bullseye.0
+    version: v1.29.0-go1.23.10-bullseye.0
     refPaths:
     - path: build/build-image/cross/VERSION
 
@@ -187,7 +187,7 @@ dependencies:
       match: configs\[DistrolessIptables\] = Config{list\.BuildImageRegistry, "distroless-iptables", "v([0-9]+)\.([0-9]+)\.([0-9]+)"}
 
   - name: "registry.k8s.io/go-runner: dependents"
-    version: v2.4.0-go1.23.6-bookworm.0
+    version: v2.4.0-go1.23.10-bookworm.0
     refPaths:
     - path: build/common.sh
       match: __default_go_runner_version=
diff --git a/staging/publishing/rules.yaml b/staging/publishing/rules.yaml
index 5cb6a90509a..f53b863169e 100644
--- a/staging/publishing/rules.yaml
+++ b/staging/publishing/rules.yaml
@@ -2803,4 +2803,4 @@ rules:
       - staging/src/k8s.io/endpointslice
 recursive-delete-patterns:
 - '*/.gitattributes'
-default-go-version: 1.23.6
+default-go-version: 1.23.10
diff --git a/staging/src/k8s.io/legacy-cloud-providers/azure/azure_blobDiskController_test.go b/staging/src/k8s.io/legacy-cloud-providers/azure/azure_blobDiskController_test.go
deleted file mode 100644
index fda62811d21..00000000000
--- a/staging/src/k8s.io/legacy-cloud-providers/azure/azure_blobDiskController_test.go
+++ /dev/null
@@ -1,364 +0,0 @@
-//go:build !providerless
-// +build !providerless
-
-/*
-Copyright 2020 The Kubernetes Authors.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-*/
-
-package azure
-
-import (
-	"fmt"
-	"net/http"
-	"strings"
-	"testing"
-
-	"k8s.io/legacy-cloud-providers/azure/clients/storageaccountclient/mockstorageaccountclient"
-	"k8s.io/legacy-cloud-providers/azure/retry"
-	"k8s.io/utils/pointer"
-
-	"github.com/Azure/azure-sdk-for-go/services/storage/mgmt/2019-06-01/storage"
-	azstorage "github.com/Azure/azure-sdk-for-go/storage"
-	autorestazure "github.com/Azure/go-autorest/autorest/azure"
-	"github.com/golang/mock/gomock"
-	"github.com/stretchr/testify/assert"
-)
-
-var retryError500 = retry.Error{HTTPStatusCode: http.StatusInternalServerError}
-
-func GetTestBlobDiskController(t *testing.T) BlobDiskController {
-	ctrl := gomock.NewController(t)
-	defer ctrl.Finish()
-	az := GetTestCloud(ctrl)
-	az.Environment = autorestazure.PublicCloud
-	common := &controllerCommon{cloud: az, resourceGroup: "rg", location: "westus"}
-
-	return BlobDiskController{
-		common:   common,
-		accounts: make(map[string]*storageAccountState),
-	}
-}
-
-func TestInitStorageAccounts(t *testing.T) {
-	ctrl := gomock.NewController(t)
-	defer ctrl.Finish()
-	b := GetTestBlobDiskController(t)
-	b.accounts = nil
-
-	mockSAClient := mockstorageaccountclient.NewMockInterface(ctrl)
-	mockSAClient.EXPECT().ListByResourceGroup(gomock.Any(), b.common.resourceGroup).Return([]storage.Account{}, &retryError500)
-	b.common.cloud.StorageAccountClient = mockSAClient
-
-	b.initStorageAccounts()
-	assert.Empty(t, b.accounts)
-
-	mockSAClient.EXPECT().ListByResourceGroup(gomock.Any(), b.common.resourceGroup).Return([]storage.Account{
-		{
-			Name: pointer.String("ds-0"),
-			Sku:  &storage.Sku{Name: "sku"},
-		},
-	}, nil)
-	b.common.cloud.StorageAccountClient = mockSAClient
-
-	b.initStorageAccounts()
-	assert.Equal(t, 1, len(b.accounts))
-}
-
-func TestCreateVolume(t *testing.T) {
-	ctrl := gomock.NewController(t)
-	defer ctrl.Finish()
-	b := GetTestBlobDiskController(t)
-
-	mockSAClient := mockstorageaccountclient.NewMockInterface(ctrl)
-	mockSAClient.EXPECT().ListKeys(gomock.Any(), b.common.resourceGroup, "testsa").Return(storage.AccountListKeysResult{}, &retryError500)
-	b.common.cloud.StorageAccountClient = mockSAClient
-
-	diskName, diskURI, requestGB, err := b.CreateVolume("testBlob", "testsa", "type", b.common.location, 10)
-	expectedErr := fmt.Errorf("could not get storage key for storage account testsa: could not get storage key for "+
-		"storage account testsa: Retriable: false, RetryAfter: 0s, HTTPStatusCode: 500, RawError: %w", error(nil))
-	assert.EqualError(t, err, expectedErr.Error())
-	assert.Empty(t, diskName)
-	assert.Empty(t, diskURI)
-	assert.Zero(t, requestGB)
-
-	mockSAClient.EXPECT().ListKeys(gomock.Any(), b.common.resourceGroup, "testsa").Return(storage.AccountListKeysResult{
-		Keys: &[]storage.AccountKey{
-			{
-				KeyName: pointer.String("key1"),
-				Value:   pointer.String("dmFsdWUK"),
-			},
-		},
-	}, nil)
-	diskName, diskURI, requestGB, err = b.CreateVolume("testBlob", "testsa", "type", b.common.location, 10)
-	expectedErrStr := "failed to put page blob testBlob.vhd in container vhds: storage: service returned error: StatusCode=403, ErrorCode=AccountIsDisabled, ErrorMessage=The specified account is disabled."
-	assert.Error(t, err)
-	assert.True(t, strings.Contains(err.Error(), expectedErrStr))
-	assert.Empty(t, diskName)
-	assert.Empty(t, diskURI)
-	assert.Zero(t, requestGB)
-}
-
-func TestDeleteVolume(t *testing.T) {
-	ctrl := gomock.NewController(t)
-	defer ctrl.Finish()
-	b := GetTestBlobDiskController(t)
-	b.common.cloud.BlobDiskController = &b
-
-	mockSAClient := mockstorageaccountclient.NewMockInterface(ctrl)
-	mockSAClient.EXPECT().ListKeys(gomock.Any(), b.common.resourceGroup, "foo").Return(storage.AccountListKeysResult{}, &retryError500).Times(2)
-	b.common.cloud.StorageAccountClient = mockSAClient
-
-	fakeDiskURL := "fake"
-	diskURL := "https://foo.blob./vhds/bar.vhd"
-	err := b.DeleteVolume(diskURL)
-	expectedErr := fmt.Errorf("no key for storage account foo, err Retriable: false, RetryAfter: 0s, HTTPStatusCode: 500, RawError: %w", error(nil))
-	assert.EqualError(t, err, expectedErr.Error())
-
-	err = b.DeleteVolume(diskURL)
-	assert.EqualError(t, err, expectedErr.Error())
-
-	mockSAClient.EXPECT().ListKeys(gomock.Any(), b.common.resourceGroup, "foo").Return(storage.AccountListKeysResult{
-		Keys: &[]storage.AccountKey{
-			{
-				KeyName: pointer.String("key1"),
-				Value:   pointer.String("dmFsdWUK"),
-			},
-		},
-	}, nil)
-
-	err = b.DeleteVolume(fakeDiskURL)
-	expectedErr = fmt.Errorf("failed to parse vhd URI invalid vhd URI for regex https://(.*).blob./vhds/(.*): fake")
-	assert.Equal(t, expectedErr, err)
-
-	err = b.DeleteVolume(diskURL)
-	expectedErrStr := "failed to delete vhd https://foo.blob./vhds/bar.vhd, account foo, blob bar.vhd, err: storage: service returned error: " +
-		"StatusCode=403, ErrorCode=AccountIsDisabled, ErrorMessage=The specified account is disabled."
-	assert.Error(t, err)
-	assert.True(t, strings.Contains(err.Error(), expectedErrStr))
-}
-
-func TestCreateVHDBlobDisk(t *testing.T) {
-	ctrl := gomock.NewController(t)
-	defer ctrl.Finish()
-	b := GetTestBlobDiskController(t)
-
-	b.common.cloud.Environment = autorestazure.PublicCloud
-	client, err := azstorage.NewBasicClientOnSovereignCloud("testsa", "a2V5Cg==", b.common.cloud.Environment)
-	assert.NoError(t, err)
-	blobClient := client.GetBlobService()
-
-	_, _, err = b.createVHDBlobDisk(blobClient, "testsa", "blob", vhdContainerName, int64(10))
-	expectedErr := "failed to put page blob blob.vhd in container vhds: storage: service returned error: StatusCode=403, ErrorCode=AccountIsDisabled, ErrorMessage=The specified account is disabled."
-	assert.Error(t, err)
-	assert.True(t, strings.Contains(err.Error(), expectedErr))
-}
-
-func TestGetAllStorageAccounts(t *testing.T) {
-	ctrl := gomock.NewController(t)
-	defer ctrl.Finish()
-	b := GetTestBlobDiskController(t)
-
-	expectedStorageAccounts := []storage.Account{
-		{
-			Name: pointer.String("this-should-be-skipped"),
-		},
-		{
-			Name: pointer.String("this-should-be-skipped"),
-			Sku:  &storage.Sku{Name: "sku"},
-		},
-		{
-			Name: pointer.String("ds-0"),
-			Sku:  &storage.Sku{Name: "sku"},
-		},
-	}
-
-	mockSAClient := mockstorageaccountclient.NewMockInterface(ctrl)
-	mockSAClient.EXPECT().ListByResourceGroup(gomock.Any(), b.common.resourceGroup).Return(expectedStorageAccounts, nil)
-	b.common.cloud.StorageAccountClient = mockSAClient
-
-	accounts, err := b.getAllStorageAccounts()
-	assert.NoError(t, err)
-	assert.Equal(t, 1, len(accounts))
-}
-
-func TestEnsureDefaultContainer(t *testing.T) {
-	ctrl := gomock.NewController(t)
-	defer ctrl.Finish()
-	b := GetTestBlobDiskController(t)
-
-	mockSAClient := mockstorageaccountclient.NewMockInterface(ctrl)
-	b.common.cloud.StorageAccountClient = mockSAClient
-
-	mockSAClient.EXPECT().GetProperties(gomock.Any(), b.common.resourceGroup, "testsa").Return(storage.Account{}, &retryError500)
-	err := b.ensureDefaultContainer("testsa")
-	expectedErr := fmt.Errorf("azureDisk - account testsa does not exist while trying to create/ensure default container")
-	assert.Equal(t, expectedErr, err)
-
-	b.accounts["testsa"] = &storageAccountState{defaultContainerCreated: true}
-	err = b.ensureDefaultContainer("testsa")
-	assert.NoError(t, err)
-
-	b.accounts["testsa"] = &storageAccountState{isValidating: 0}
-	mockSAClient.EXPECT().GetProperties(gomock.Any(), b.common.resourceGroup, "testsa").Return(storage.Account{
-		AccountProperties: &storage.AccountProperties{ProvisioningState: storage.Creating},
-	}, nil)
-	mockSAClient.EXPECT().GetProperties(gomock.Any(), b.common.resourceGroup, "testsa").Return(storage.Account{}, &retryError500)
-	mockSAClient.EXPECT().GetProperties(gomock.Any(), b.common.resourceGroup, "testsa").Return(storage.Account{
-		AccountProperties: &storage.AccountProperties{ProvisioningState: storage.Succeeded},
-	}, nil)
-	mockSAClient.EXPECT().ListKeys(gomock.Any(), b.common.resourceGroup, "testsa").Return(storage.AccountListKeysResult{
-		Keys: &[]storage.AccountKey{
-			{
-				KeyName: pointer.String("key1"),
-				Value:   pointer.String("key1"),
-			},
-		},
-	}, nil)
-	err = b.ensureDefaultContainer("testsa")
-	expectedErrStr := "storage: service returned error: StatusCode=403, ErrorCode=AccountIsDisabled, ErrorMessage=The specified account is disabled."
-	assert.Error(t, err)
-	assert.True(t, strings.Contains(err.Error(), expectedErrStr))
-}
-
-func TestGetDiskCount(t *testing.T) {
-	ctrl := gomock.NewController(t)
-	defer ctrl.Finish()
-	b := GetTestBlobDiskController(t)
-
-	mockSAClient := mockstorageaccountclient.NewMockInterface(ctrl)
-	b.common.cloud.StorageAccountClient = mockSAClient
-
-	b.accounts["testsa"] = &storageAccountState{diskCount: 1}
-	count, err := b.getDiskCount("testsa")
-	assert.Equal(t, 1, count)
-	assert.NoError(t, err)
-
-	b.accounts["testsa"] = &storageAccountState{diskCount: -1}
-	mockSAClient.EXPECT().GetProperties(gomock.Any(), b.common.resourceGroup, "testsa").Return(storage.Account{}, &retryError500)
-	count, err = b.getDiskCount("testsa")
-	assert.Zero(t, count)
-	expectedErr := fmt.Errorf("azureDisk - account testsa does not exist while trying to create/ensure default container")
-	assert.Equal(t, expectedErr, err)
-
-	b.accounts["testsa"].defaultContainerCreated = true
-	mockSAClient.EXPECT().ListKeys(gomock.Any(), b.common.resourceGroup, "testsa").Return(storage.AccountListKeysResult{
-		Keys: &[]storage.AccountKey{
-			{
-				KeyName: pointer.String("key1"),
-				Value:   pointer.String("key1"),
-			},
-		},
-	}, nil)
-	count, err = b.getDiskCount("testsa")
-	expectedErrStr := "storage: service returned error: StatusCode=403, ErrorCode=AccountIsDisabled, ErrorMessage=The specified account is disabled."
-	assert.Error(t, err)
-	assert.True(t, strings.Contains(err.Error(), expectedErrStr))
-	assert.Zero(t, count)
-}
-
-func TestFindSANameForDisk(t *testing.T) {
-	ctrl := gomock.NewController(t)
-	defer ctrl.Finish()
-	b := GetTestBlobDiskController(t)
-
-	mockSAClient := mockstorageaccountclient.NewMockInterface(ctrl)
-	b.common.cloud.StorageAccountClient = mockSAClient
-
-	b.accounts = map[string]*storageAccountState{
-		"this-shall-be-skipped": {name: "fake"},
-		"ds0": {
-			name:      "ds0",
-			saType:    storage.StandardGRS,
-			diskCount: 50,
-		},
-	}
-	mockSAClient.EXPECT().GetProperties(gomock.Any(), b.common.resourceGroup, gomock.Any()).Return(storage.Account{}, &retryError500).Times(2)
-	mockSAClient.EXPECT().GetProperties(gomock.Any(), b.common.resourceGroup, gomock.Any()).Return(storage.Account{
-		AccountProperties: &storage.AccountProperties{ProvisioningState: storage.Succeeded},
-	}, nil).Times(2)
-	mockSAClient.EXPECT().ListKeys(gomock.Any(), b.common.resourceGroup, gomock.Any()).Return(storage.AccountListKeysResult{
-		Keys: &[]storage.AccountKey{
-			{
-				KeyName: pointer.String("key1"),
-				Value:   pointer.String("key1"),
-			},
-		},
-	}, nil)
-	mockSAClient.EXPECT().Create(gomock.Any(), b.common.resourceGroup, gomock.Any(), gomock.Any()).Return(nil)
-	name, err := b.findSANameForDisk(storage.StandardGRS)
-	expectedErr := "does not exist while trying to create/ensure default container"
-	assert.True(t, strings.Contains(err.Error(), expectedErr))
-	assert.Error(t, err)
-	assert.Empty(t, name)
-
-	b.accounts = make(map[string]*storageAccountState)
-	name, err = b.findSANameForDisk(storage.StandardGRS)
-	assert.Error(t, err)
-	assert.Empty(t, name)
-
-	b.accounts = map[string]*storageAccountState{
-		"ds0": {
-			name:      "ds0",
-			saType:    storage.StandardGRS,
-			diskCount: 0,
-		},
-	}
-	name, err = b.findSANameForDisk(storage.StandardGRS)
-	assert.Equal(t, "ds0", name)
-	assert.NoError(t, err)
-
-	for i := 0; i < maxStorageAccounts; i++ {
-		b.accounts[fmt.Sprintf("ds%d", i)] = &storageAccountState{
-			name:      fmt.Sprintf("ds%d", i),
-			saType:    storage.StandardGRS,
-			diskCount: 59,
-		}
-	}
-	name, err = b.findSANameForDisk(storage.StandardGRS)
-	assert.NotEmpty(t, name)
-	assert.NoError(t, err)
-}
-
-// Skipping this test due to failing ci but not removing to keep for future reference if needed
-// GH Issue: https://github.com/kubernetes/kubernetes/issues/129007
-func TestCreateBlobDisk(t *testing.T) {
-	t.Skip("skipping test due some Azure API changes and failing ci")
-	ctrl := gomock.NewController(t)
-	defer ctrl.Finish()
-	b := GetTestBlobDiskController(t)
-	b.accounts = map[string]*storageAccountState{
-		"ds0": {
-			name:      "ds0",
-			saType:    storage.StandardGRS,
-			diskCount: 0,
-		},
-	}
-
-	mockSAClient := mockstorageaccountclient.NewMockInterface(ctrl)
-	b.common.cloud.StorageAccountClient = mockSAClient
-	mockSAClient.EXPECT().ListKeys(gomock.Any(), b.common.resourceGroup, gomock.Any()).Return(storage.AccountListKeysResult{
-		Keys: &[]storage.AccountKey{
-			{
-				KeyName: pointer.String("key1"),
-				Value:   pointer.String("key1"),
-			},
-		},
-	}, nil)
-	diskURI, err := b.CreateBlobDisk("datadisk", storage.StandardGRS, 10)
-	expectedErr := "failed to put page blob datadisk.vhd in container vhds"
-	assert.Error(t, err)
-	assert.True(t, strings.Contains(err.Error(), expectedErr))
-	assert.Empty(t, diskURI)
-}
diff --git a/test/images/Makefile b/test/images/Makefile
index a2bd6fb83a3..a96a629816a 100644
--- a/test/images/Makefile
+++ b/test/images/Makefile
@@ -16,7 +16,7 @@ REGISTRY ?= registry.k8s.io/e2e-test-images
 GOARM ?= 7
 DOCKER_CERT_BASE_PATH ?=
 QEMUVERSION=v5.1.0-2
-GOLANG_VERSION=1.23.6
+GOLANG_VERSION=1.23.10
 export
 
 ifndef WHAT
