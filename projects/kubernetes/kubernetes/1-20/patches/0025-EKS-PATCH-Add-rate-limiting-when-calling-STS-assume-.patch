From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Prateek Gogia <pgogia@amazon.com>
Date: Thu, 14 Jul 2022 19:13:22 -0500
Subject: [PATCH] --EKS-PATCH-- Add rate limiting when calling STS assume role
 API

Cherry-pick of upstream Kubernetes PR # 110706
The upstream PR is merged and should be available in future k/k releases.
However we need the STS throttling fix for 1.20-1.23.
---
 .../k8s.io/legacy-cloud-providers/aws/aws.go  |  3 +-
 .../aws/aws_assumerole_provider.go            | 62 +++++++++++++++++++
 2 files changed, 64 insertions(+), 1 deletion(-)
 create mode 100644 staging/src/k8s.io/legacy-cloud-providers/aws/aws_assumerole_provider.go

diff --git a/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go b/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go
index 172952369d5..9e2c5d84e67 100644
--- a/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go
+++ b/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go
@@ -1,3 +1,4 @@
+//go:build !providerless
 // +build !providerless
 
 /*
@@ -781,7 +782,7 @@ func newAWSSDKProvider(cfg *CloudConfig) (*awsSDKProvider, error) {
 	creds := credentials.NewChainCredentials(
 		[]credentials.Provider{
 			&credentials.EnvProvider{},
-			provider,
+			assumeRoleProvider(provider),
 			&credentials.SharedCredentialsProvider{},
 		})
 	sdkProvider.creds = creds
diff --git a/staging/src/k8s.io/legacy-cloud-providers/aws/aws_assumerole_provider.go b/staging/src/k8s.io/legacy-cloud-providers/aws/aws_assumerole_provider.go
new file mode 100644
index 00000000000..0cbff6ce2b3
--- /dev/null
+++ b/staging/src/k8s.io/legacy-cloud-providers/aws/aws_assumerole_provider.go
@@ -0,0 +1,62 @@
+/*
+Copyright 2014 The Kubernetes Authors.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+*/
+
+package aws
+
+import (
+	"sync"
+	"time"
+
+	"github.com/aws/aws-sdk-go/aws/credentials"
+)
+
+const (
+	invalidateCredsCacheAfter = 1 * time.Second
+)
+
+// assumeRoleProviderWithRateLimiting makes sure we call the underlying provider only
+// once after `invalidateCredsCacheAfter` period
+type assumeRoleProviderWithRateLimiting struct {
+	provider             credentials.Provider
+	invalidateCredsCacheAfter time.Duration
+	sync.RWMutex
+	lastError        error
+	lastValue        credentials.Value
+	lastRetrieveTime time.Time
+}
+
+func assumeRoleProvider(provider credentials.Provider) credentials.Provider {
+	return &assumeRoleProviderWithRateLimiting{provider: provider,
+		invalidateCredsCacheAfter: invalidateCredsCacheAfter}
+}
+
+func (l *assumeRoleProviderWithRateLimiting) Retrieve() (credentials.Value, error) {
+	l.Lock()
+	defer l.Unlock()
+	if time.Since(l.lastRetrieveTime) < l.invalidateCredsCacheAfter {
+		if l.lastError != nil {
+			return credentials.Value{}, l.lastError
+		}
+		return l.lastValue, nil
+	}
+	l.lastValue, l.lastError = l.provider.Retrieve()
+	l.lastRetrieveTime = time.Now()
+	return l.lastValue, l.lastError
+}
+
+func (l *assumeRoleProviderWithRateLimiting) IsExpired() bool {
+	return l.provider.IsExpired()
+}
\ No newline at end of file
