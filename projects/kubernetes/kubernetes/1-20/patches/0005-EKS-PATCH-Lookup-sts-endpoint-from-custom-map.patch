From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aleksandr Melnik <melnikal@amazon.com>
Date: Wed, 8 Jan 2020 17:23:06 -0800
Subject: --EKS-PATCH-- Lookup sts endpoint from custom map

 Update STS endpoint to support different partitions.

Signed-off-by: Jyoti Mahapatra <jyotima@amazon.com>
---
 .../k8s.io/legacy-cloud-providers/aws/BUILD   |  1 +
 .../k8s.io/legacy-cloud-providers/aws/aws.go  | 40 +++++++-
 .../legacy-cloud-providers/aws/aws_test.go    | 56 +++++++----
 vendor/github.com/aws/aws-sdk-go/aws/BUILD    |  1 +
 .../github.com/aws/aws-sdk-go/aws/arn/BUILD   | 23 +++++
 .../github.com/aws/aws-sdk-go/aws/arn/arn.go  | 93 +++++++++++++++++++
 vendor/modules.txt                            |  1 +
 7 files changed, 197 insertions(+), 18 deletions(-)
 create mode 100644 vendor/github.com/aws/aws-sdk-go/aws/arn/BUILD
 create mode 100644 vendor/github.com/aws/aws-sdk-go/aws/arn/arn.go

diff --git a/staging/src/k8s.io/legacy-cloud-providers/aws/BUILD b/staging/src/k8s.io/legacy-cloud-providers/aws/BUILD
index 47d1f0ff5a7..eb96ef59b59 100644
--- a/staging/src/k8s.io/legacy-cloud-providers/aws/BUILD
+++ b/staging/src/k8s.io/legacy-cloud-providers/aws/BUILD
@@ -52,6 +52,7 @@ go_library(
         "//staging/src/k8s.io/component-base/metrics/legacyregistry:go_default_library",
         "//staging/src/k8s.io/csi-translation-lib/plugins:go_default_library",
         "//vendor/github.com/aws/aws-sdk-go/aws:go_default_library",
+        "//vendor/github.com/aws/aws-sdk-go/aws/arn:go_default_library",
         "//vendor/github.com/aws/aws-sdk-go/aws/awserr:go_default_library",
         "//vendor/github.com/aws/aws-sdk-go/aws/credentials:go_default_library",
         "//vendor/github.com/aws/aws-sdk-go/aws/credentials/ec2rolecreds:go_default_library",
diff --git a/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go b/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go
index 6f280c19320..ab40e0e4937 100644
--- a/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go
+++ b/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go
@@ -33,6 +33,7 @@ import (
 	"time"
 
 	"github.com/aws/aws-sdk-go/aws"
+	"github.com/aws/aws-sdk-go/aws/arn"
 	"github.com/aws/aws-sdk-go/aws/awserr"
 	"github.com/aws/aws-sdk-go/aws/credentials"
 	"github.com/aws/aws-sdk-go/aws/credentials/ec2rolecreds"
@@ -767,7 +768,10 @@ func newAWSSDKProvider(cfg *CloudConfig) (*awsSDKProvider, error) {
 		if err != nil {
 			return nil, err
 		}
-		stsEndpoint := fmt.Sprintf("sts.%s.amazonaws.com", regionName)
+		stsEndpoint, err := constructStsEndpoint(cfg.Global.RoleARN, regionName)
+		if err != nil {
+			return nil, err
+		}
 		provider = &stscreds.AssumeRoleProvider{
 			Client:  sts.New(sess, aws.NewConfig().WithRegion(regionName).WithEndpoint(stsEndpoint)),
 			RoleARN: cfg.Global.RoleARN,
@@ -5031,3 +5035,37 @@ func getInitialAttachDetachDelay(status string) time.Duration {
 	}
 	return volumeAttachmentStatusInitialDelay
 }
+
+// Returns the url suffix for AWS Endpoints in the region from the provided arn
+func arnToAwsUrlSuffix(arnString string) (string, error) {
+	arnStruct, err := arn.Parse(arnString)
+	if err != nil {
+		return "", err
+	}
+	switch arnStruct.Partition {
+	case "aws":
+		return "amazonaws.com", nil
+	case "aws-cn":
+		return "amazonaws.com.cn", nil
+	case "aws-us-gov":
+		return "amazonaws.com", nil
+	case "aws-iso":
+		return "c2s.ic.gov", nil
+	case "aws-iso-b":
+		return "sc2s.sgov.gov", nil
+	case "aws-iso-c":
+		return "amazonaws.ic.gov", nil
+	case "aws-iso-d":
+		return "amazonaws.scloud", nil
+	default:
+		return "", fmt.Errorf("unsupported partition: %s", arnStruct.Partition)
+	}
+}
+
+func constructStsEndpoint(arnString, region string) (string, error) {
+	suffix, err := arnToAwsUrlSuffix(arnString)
+	if err != nil {
+		return "", err
+	}
+	return fmt.Sprintf("sts.%s.%s", region, suffix), nil
+}
diff --git a/staging/src/k8s.io/legacy-cloud-providers/aws/aws_test.go b/staging/src/k8s.io/legacy-cloud-providers/aws/aws_test.go
index cee17b26bf1..b1590a59c1e 100644
--- a/staging/src/k8s.io/legacy-cloud-providers/aws/aws_test.go
+++ b/staging/src/k8s.io/legacy-cloud-providers/aws/aws_test.go
@@ -3047,24 +3047,46 @@ func newMockedFakeAWSServices(id string) *FakeAWSServices {
 	return s
 }
 
-func TestAzToRegion(t *testing.T) {
-	testCases := []struct {
-		az     string
-		region string
-	}{
-		{"us-west-2a", "us-west-2"},
-		{"us-west-2-lax-1a", "us-west-2"},
-		{"ap-northeast-2a", "ap-northeast-2"},
-		{"us-gov-east-1a", "us-gov-east-1"},
-		{"us-iso-east-1a", "us-iso-east-1"},
-		{"us-isob-east-1a", "us-isob-east-1"},
-	}
+func TestConstructStsEndpoint(t *testing.T) {
+	t.Run("returns an error when the arn is invalid", func(t *testing.T) {
+		arn := "asdf"
+		region := "us-east-1"
+		endpoint, err := constructStsEndpoint(arn, region)
+		assert.Equal(t, endpoint, "")
+		require.Error(t, err)
+	})
 
-	for _, testCase := range testCases {
-		result, err := azToRegion(testCase.az)
-		assert.NoError(t, err)
-		assert.Equal(t, testCase.region, result)
-	}
+	t.Run("returns sts.us-east-1.amazonaws.com when region/partition is us-east-1/aws", func(t *testing.T) {
+		arn := "arn:aws:eks:us-east-1:1234:cluster/asdf"
+		region := "us-east-1"
+		endpoint, err := constructStsEndpoint(arn, region)
+		assert.Equal(t, endpoint, "sts.us-east-1.amazonaws.com")
+		require.NoError(t, err)
+	})
+
+	t.Run("returns sts.cn-northwest-1.amazonaws.com.cn when region/partition is cn-northwest-1/aws-cn", func(t *testing.T) {
+		arn := "arn:aws-cn:eks:cn-northwest-1:1234:cluster/asdf"
+		region := "cn-northwest-1"
+		endpoint, err := constructStsEndpoint(arn, region)
+		assert.Equal(t, endpoint, "sts.cn-northwest-1.amazonaws.com.cn")
+		require.NoError(t, err)
+	})
+
+	t.Run("returns sts.us-gov-east-1.amazonaws.com when region/partion is us-gov-east-1/aws-us-gov", func(t *testing.T) {
+		arn := "arn:aws-us-gov:eks:us-gov-east-1:1234:cluster/asdf"
+		region := "us-gov-east-1"
+		endpoint, err := constructStsEndpoint(arn, region)
+		assert.Equal(t, endpoint, "sts.us-gov-east-1.amazonaws.com")
+		require.NoError(t, err)
+	})
+
+	t.Run("returns sts.me-south-1.amazonaws.com when region/partion is me-south-1/aws", func(t *testing.T) {
+		arn := "arn:aws:eks:me-south-1:1234:cluster/asdf"
+		region := "me-south-1"
+		endpoint, err := constructStsEndpoint(arn, region)
+		assert.Equal(t, endpoint, "sts.me-south-1.amazonaws.com")
+		require.NoError(t, err)
+	})
 }
 
 func TestCloud_sortELBSecurityGroupList(t *testing.T) {
diff --git a/vendor/github.com/aws/aws-sdk-go/aws/BUILD b/vendor/github.com/aws/aws-sdk-go/aws/BUILD
index e66fc977600..f2a5d3d7b1b 100644
--- a/vendor/github.com/aws/aws-sdk-go/aws/BUILD
+++ b/vendor/github.com/aws/aws-sdk-go/aws/BUILD
@@ -42,6 +42,7 @@ filegroup(
     name = "all-srcs",
     srcs = [
         ":package-srcs",
+        "//vendor/github.com/aws/aws-sdk-go/aws/arn:all-srcs",
         "//vendor/github.com/aws/aws-sdk-go/aws/awserr:all-srcs",
         "//vendor/github.com/aws/aws-sdk-go/aws/awsutil:all-srcs",
         "//vendor/github.com/aws/aws-sdk-go/aws/client:all-srcs",
diff --git a/vendor/github.com/aws/aws-sdk-go/aws/arn/BUILD b/vendor/github.com/aws/aws-sdk-go/aws/arn/BUILD
new file mode 100644
index 00000000000..0a91fe40e86
--- /dev/null
+++ b/vendor/github.com/aws/aws-sdk-go/aws/arn/BUILD
@@ -0,0 +1,23 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "go_default_library",
+    srcs = ["arn.go"],
+    importmap = "k8s.io/kubernetes/vendor/github.com/aws/aws-sdk-go/aws/arn",
+    importpath = "github.com/aws/aws-sdk-go/aws/arn",
+    visibility = ["//visibility:public"],
+)
+
+filegroup(
+    name = "package-srcs",
+    srcs = glob(["**"]),
+    tags = ["automanaged"],
+    visibility = ["//visibility:private"],
+)
+
+filegroup(
+    name = "all-srcs",
+    srcs = [":package-srcs"],
+    tags = ["automanaged"],
+    visibility = ["//visibility:public"],
+)
diff --git a/vendor/github.com/aws/aws-sdk-go/aws/arn/arn.go b/vendor/github.com/aws/aws-sdk-go/aws/arn/arn.go
new file mode 100644
index 00000000000..1c496742903
--- /dev/null
+++ b/vendor/github.com/aws/aws-sdk-go/aws/arn/arn.go
@@ -0,0 +1,93 @@
+// Package arn provides a parser for interacting with Amazon Resource Names.
+package arn
+
+import (
+	"errors"
+	"strings"
+)
+
+const (
+	arnDelimiter = ":"
+	arnSections  = 6
+	arnPrefix    = "arn:"
+
+	// zero-indexed
+	sectionPartition = 1
+	sectionService   = 2
+	sectionRegion    = 3
+	sectionAccountID = 4
+	sectionResource  = 5
+
+	// errors
+	invalidPrefix   = "arn: invalid prefix"
+	invalidSections = "arn: not enough sections"
+)
+
+// ARN captures the individual fields of an Amazon Resource Name.
+// See http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html for more information.
+type ARN struct {
+	// The partition that the resource is in. For standard AWS regions, the partition is "aws". If you have resources in
+	// other partitions, the partition is "aws-partitionname". For example, the partition for resources in the China
+	// (Beijing) region is "aws-cn".
+	Partition string
+
+	// The service namespace that identifies the AWS product (for example, Amazon S3, IAM, or Amazon RDS). For a list of
+	// namespaces, see
+	// http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces.
+	Service string
+
+	// The region the resource resides in. Note that the ARNs for some resources do not require a region, so this
+	// component might be omitted.
+	Region string
+
+	// The ID of the AWS account that owns the resource, without the hyphens. For example, 123456789012. Note that the
+	// ARNs for some resources don't require an account number, so this component might be omitted.
+	AccountID string
+
+	// The content of this part of the ARN varies by service. It often includes an indicator of the type of resource â€”
+	// for example, an IAM user or Amazon RDS database - followed by a slash (/) or a colon (:), followed by the
+	// resource name itself. Some services allows paths for resource names, as described in
+	// http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arns-paths.
+	Resource string
+}
+
+// Parse parses an ARN into its constituent parts.
+//
+// Some example ARNs:
+// arn:aws:elasticbeanstalk:us-east-1:123456789012:environment/My App/MyEnvironment
+// arn:aws:iam::123456789012:user/David
+// arn:aws:rds:eu-west-1:123456789012:db:mysql-db
+// arn:aws:s3:::my_corporate_bucket/exampleobject.png
+func Parse(arn string) (ARN, error) {
+	if !strings.HasPrefix(arn, arnPrefix) {
+		return ARN{}, errors.New(invalidPrefix)
+	}
+	sections := strings.SplitN(arn, arnDelimiter, arnSections)
+	if len(sections) != arnSections {
+		return ARN{}, errors.New(invalidSections)
+	}
+	return ARN{
+		Partition: sections[sectionPartition],
+		Service:   sections[sectionService],
+		Region:    sections[sectionRegion],
+		AccountID: sections[sectionAccountID],
+		Resource:  sections[sectionResource],
+	}, nil
+}
+
+// IsARN returns whether the given string is an ARN by looking for
+// whether the string starts with "arn:" and contains the correct number
+// of sections delimited by colons(:).
+func IsARN(arn string) bool {
+	return strings.HasPrefix(arn, arnPrefix) && strings.Count(arn, ":") >= arnSections-1
+}
+
+// String returns the canonical representation of the ARN
+func (arn ARN) String() string {
+	return arnPrefix +
+		arn.Partition + arnDelimiter +
+		arn.Service + arnDelimiter +
+		arn.Region + arnDelimiter +
+		arn.AccountID + arnDelimiter +
+		arn.Resource
+}
diff --git a/vendor/modules.txt b/vendor/modules.txt
index 8debf89adc5..f5536ff885f 100644
--- a/vendor/modules.txt
+++ b/vendor/modules.txt
@@ -135,6 +135,7 @@ github.com/asaskevich/govalidator
 ## explicit
 # github.com/aws/aws-sdk-go => github.com/aws/aws-sdk-go v1.35.24
 github.com/aws/aws-sdk-go/aws
+github.com/aws/aws-sdk-go/aws/arn
 github.com/aws/aws-sdk-go/aws/awserr
 github.com/aws/aws-sdk-go/aws/awsutil
 github.com/aws/aws-sdk-go/aws/client
