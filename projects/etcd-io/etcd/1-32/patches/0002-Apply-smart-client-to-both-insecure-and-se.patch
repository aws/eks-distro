From 6fbb2311a9a6aefe6800485d90c4cdcfbef6e4d0 Mon Sep 17 00:00:00 2001
From: Vineeth Bandi <banvinee@amazon.com>
Date: Tue, 13 March 2025 13:05:37 -0500
Subject: [PATCH] Apply smart client to both insecure and secure
 endpoints

---
 server/embed/etcd.go                       | 16 ++++++++++++++++
 server/etcdserver/api/v3rpc/grpc.go        |  7 -------
 server/etcdserver/api/v3rpc/health.go      |  4 ++--
 server/etcdserver/api/v3rpc/maintenance.go |  4 ++--
 tests/e2e/failover_test.go                 |  8 ++++++++
 tests/integration/cluster.go               |  8 ++++++++
 6 files changed, 36 insertions(+), 11 deletions(-)

diff --git a/server/embed/etcd.go b/server/embed/etcd.go
index b2c7fee44..14543975e 100644
--- a/server/embed/etcd.go
+++ b/server/embed/etcd.go
@@ -31,6 +31,7 @@ import (
 	"sync"
 	"time"

+	pb "go.etcd.io/etcd/api/v3/etcdserverpb"
 	"go.etcd.io/etcd/api/v3/version"
 	"go.etcd.io/etcd/client/pkg/v3/transport"
 	"go.etcd.io/etcd/client/pkg/v3/types"
@@ -52,6 +53,8 @@ import (
 	"go.uber.org/zap"
 	"google.golang.org/grpc"
 	"google.golang.org/grpc/credentials/insecure"
+	"google.golang.org/grpc/health"
+	healthpb "google.golang.org/grpc/health/grpc_health_v1"
 	"google.golang.org/grpc/keepalive"
 )

@@ -777,8 +780,21 @@ func (e *Etcd) serveClients() (err error) {
 		}
 	}

+	// All sctxs share the same health server and maintenance server
+	hsrv := health.NewServer()
+	healthNotifier := v3rpc.NewHealthNotifier(hsrv, e.Server)
+	maintenanceServer := v3rpc.NewMaintenanceServer(e.Server, healthNotifier)
+
 	// start client servers in each goroutine
 	for _, sctx := range e.sctxs {
+		originalServiceRegister := sctx.serviceRegister
+		sctx.serviceRegister = func(s *grpc.Server) {
+			if originalServiceRegister != nil {
+				originalServiceRegister(s)
+			}
+			pb.RegisterMaintenanceServer(s, maintenanceServer)
+			healthpb.RegisterHealthServer(s, hsrv)
+		}
 		go func(s *serveCtx) {
 			e.errHandler(s.serve(e.Server, &e.cfg.ClientTLSInfo, h, e.errHandler, e.grpcGatewayDial(splitHttp), splitHttp, gopts...))
 		}(sctx)
diff --git a/server/etcdserver/api/v3rpc/grpc.go b/server/etcdserver/api/v3rpc/grpc.go
index 6947903a3..88dfabe06 100644
--- a/server/etcdserver/api/v3rpc/grpc.go
+++ b/server/etcdserver/api/v3rpc/grpc.go
@@ -26,8 +26,6 @@ import (
 	grpc_prometheus "github.com/grpc-ecosystem/go-grpc-prometheus"
 	"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc"
 	"google.golang.org/grpc"
-	"google.golang.org/grpc/health"
-	healthpb "google.golang.org/grpc/health/grpc_health_v1"
 )

 const (
@@ -77,11 +75,6 @@ func Server(s *etcdserver.EtcdServer, tls *tls.Config, interceptor grpc.UnarySer
 	pb.RegisterClusterServer(grpcServer, NewClusterServer(s))
 	pb.RegisterAuthServer(grpcServer, NewAuthServer(s))

-	hsrv := health.NewServer()
-	healthNotifier := newHealthNotifier(hsrv, s)
-	pb.RegisterMaintenanceServer(grpcServer, NewMaintenanceServer(s, healthNotifier))
-	healthpb.RegisterHealthServer(grpcServer, hsrv)
-
 	// set zero values for metrics registered for this grpc server
 	grpc_prometheus.Register(grpcServer)

diff --git a/server/etcdserver/api/v3rpc/health.go b/server/etcdserver/api/v3rpc/health.go
index f58396d1c..2581d6636 100644
--- a/server/etcdserver/api/v3rpc/health.go
+++ b/server/etcdserver/api/v3rpc/health.go
@@ -25,12 +25,12 @@ const (
 	allGRPCServices = ""
 )

-type notifier interface {
+type Notifier interface {
 	defragStarted()
 	defragFinished()
 }

-func newHealthNotifier(hs *health.Server, s *etcdserver.EtcdServer) notifier {
+func NewHealthNotifier(hs *health.Server, s *etcdserver.EtcdServer) Notifier {
 	if hs == nil {
 		panic("unexpected nil gRPC health server")
 	}
diff --git a/server/etcdserver/api/v3rpc/maintenance.go b/server/etcdserver/api/v3rpc/maintenance.go
index 7db17e1a0..3dae84b01 100644
--- a/server/etcdserver/api/v3rpc/maintenance.go
+++ b/server/etcdserver/api/v3rpc/maintenance.go
@@ -77,10 +77,10 @@ type maintenanceServer struct {
 	cs     ClusterStatusGetter
 	d      Downgrader

-	healthNotifier notifier
+	healthNotifier Notifier
 }

-func NewMaintenanceServer(s *etcdserver.EtcdServer, healthNotifier notifier) pb.MaintenanceServer {
+func NewMaintenanceServer(s *etcdserver.EtcdServer, healthNotifier Notifier) pb.MaintenanceServer {
 	srv := &maintenanceServer{lg: s.Cfg.Logger, rg: s, hasher: s.KV().HashStorage(), kg: s, bg: s, a: s, lt: s, hdr: newHeader(s), cs: s, d: s, healthNotifier: healthNotifier}
 	if srv.lg == nil {
 		srv.lg = zap.NewNop()
diff --git a/tests/e2e/failover_test.go b/tests/e2e/failover_test.go
index 505cef01e..86a0f1218 100644
--- a/tests/e2e/failover_test.go
+++ b/tests/e2e/failover_test.go
@@ -18,6 +18,8 @@ package e2e

 import (
 	"context"
+	"crypto/tls"
+	"strings"
 	"testing"
 	"time"

@@ -90,12 +92,17 @@ func TestFailoverOnDefrag(t *testing.T) {
 				ClusterSize:                         3,
 				GoFailEnabled:                       true,
 				ExperimentalStopGRPCServiceOnDefrag: tc.experimentalStopGRPCServiceOnDefragEnabled,
+				ClientTLS:                           e2e.ClientTLSAndNonTLS,
+				IsClientAutoTLS:                     true,
 			}
 			clus, err := e2e.NewEtcdProcessCluster(t, &cfg)
 			require.NoError(t, err)
 			t.Cleanup(func() { clus.Stop() })

 			endpoints := clus.EndpointsGRPC()
+			for i := range endpoints {
+				endpoints[i] = strings.ReplaceAll(endpoints[i], "http", "https")
+			}

 			requestVolume, successfulRequestCount := 0, 0
 			start := time.Now()
@@ -107,6 +114,7 @@ func TestFailoverOnDefrag(t *testing.T) {
 					DialKeepAliveTimeout: keepaliveTimeout,
 					Endpoints:            endpoints,
 					DialOptions:          tc.gRPCDialOptions,
+					TLS:                  &tls.Config{InsecureSkipVerify: true},
 				})
 				if cerr != nil {
 					return cerr
diff --git a/tests/integration/cluster.go b/tests/integration/cluster.go
index a2e9e0cce..812283085 100644
--- a/tests/integration/cluster.go
+++ b/tests/integration/cluster.go
@@ -61,6 +61,8 @@ import (
 	"go.uber.org/zap"
 	"golang.org/x/crypto/bcrypt"
 	"google.golang.org/grpc"
+	"google.golang.org/grpc/health"
+	healthpb "google.golang.org/grpc/health/grpc_health_v1"
 	"google.golang.org/grpc/keepalive"
 )

@@ -970,6 +972,12 @@ func (m *member) Launch() error {
 			}
 		}
 		m.grpcServer = v3rpc.Server(m.s, tlscfg, m.grpcServerRecorder.UnaryInterceptor(), m.grpcServerOpts...)
+		// register maintenanceServer and healthServer
+		hsrv := health.NewServer()
+		healthNotifier := v3rpc.NewHealthNotifier(hsrv, m.s)
+		maintenanceServer := v3rpc.NewMaintenanceServer(m.s, healthNotifier)
+		pb.RegisterMaintenanceServer(m.grpcServer, maintenanceServer)
+		healthpb.RegisterHealthServer(m.grpcServer, hsrv)
 		m.grpcServerPeer = v3rpc.Server(m.s, peerTLScfg, m.grpcServerRecorder.UnaryInterceptor())
 		m.serverClient = v3client.New(m.s)
 		lockpb.RegisterLockServer(m.grpcServer, v3lock.NewLockServer(m.serverClient))
